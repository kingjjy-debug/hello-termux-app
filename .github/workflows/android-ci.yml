name: Android CI (assembleDebug)

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Install Android cmdline-tools
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            TMP="$(mktemp -d)"; cd "$TMP"
            curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
            unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools/latest"
            if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools" ]; then
              mv "$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
              rmdir "$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools"
            fi
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses || true
          sdkmanager --update || true

      - name: Install required SDK packages (dynamic build-tools)
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          # 항상 필요한 것들
          sdkmanager "platform-tools" "platforms;android-34"

          echo "== Available build-tools (short) =="
          sdkmanager --list | sed -n '/Available Packages:/,$p' | grep -E 'build-tools;[0-9]+' | tail -n 50 || true

          # 우선순위 리스트 (상위가 더 선호)
          CANDIDATES=(
            "35.0.0"
            "34.0.4" "34.0.3" "34.0.2" "34.0.1" "34.0.0"
            "33.0.2" "33.0.1" "33.0.0"
          )

          FOUND=""
          LIST="$(sdkmanager --list || true)"
          for v in "${CANDIDATES[@]}"; do
            if echo "$LIST" | grep -Fq "build-tools;${v}"; then
              FOUND="$v"
              break
            fi
          done

          # 최후 수단: 목록에서 가장 최신 build-tools 하나 추출
          if [ -z "$FOUND" ]; then
            FOUND="$(echo "$LIST" | grep -Eo 'build-tools;[0-9]+\.[0-9]+\.[0-9]+' | awk -F';' '{print $2}' | sort -V | tail -n1 || true)"
          fi

          if [ -z "$FOUND" ]; then
            echo "::error::No build-tools version available from sdkmanager --list"
            exit 1
          fi

          echo ">> Installing build-tools;$FOUND"
          sdkmanager "build-tools;$FOUND"

      - name: Write local.properties
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          echo "org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8" >> gradle.properties || true
          cat local.properties

      - name: Show env
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "ANDROID_HOME=$ANDROID_HOME"
          which sdkmanager || true
          sdkmanager --version || true

      - name: Set up Gradle (8.4)
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.4

      - name: Gradle Build (assembleDebug)
        run: |
          gradle --no-daemon --warning-mode all :app:assembleDebug --stacktrace --info

      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
